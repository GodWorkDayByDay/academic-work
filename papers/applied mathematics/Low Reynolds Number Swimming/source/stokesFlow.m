%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       script stokesFlow                                 %
%       sets up a model for flagellum swimming in         %
%       viscous fluid using Stokeslet and Rotlet          %
%       formulation                                       %
%                                                         %
%       outputs- time-evolving 3-D flow field due to      %
%       flagellum rotation                                %
%                                                         %
%       Joe Dinius                                        %
%       Adv: Shankar Venkataramani                        %
%       Program in Applied Mathematics                    %
%       25 Nov 2008                                       %
%%%%%%%%%%%%%%%%%%%%%c%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
close all; clear all; clc;
%%%%%%%%%%%%%%% BEGIN INITIALIZATION %%%%%%%%%%%%%%%%%%%%%%

deltas    = .052; %stokeslet force spread
deltar    = .052; %rotlet force spread
k         = [1000 1000 1000]; %restoring force constants in 3D
nr        = 2; %number of rotlets (motors)
ns        = 1; %number of stokeslets (i.e. number of stiff rods composing flagellum
L0i       = [0 .1 0;0 -.1 0]; %torque
L0        = [0 .001 0];
timeSteps = 40;
gridStart = [0 0 0];
gridEnd   = [1 1 1];
meshWidth = .1;
torqAppPt = [.4 .2 .4]; %base of flagellum location
lrod      = .1;
seed      = 12580983;
rand('seed',seed); %initialize random number generator for traceability
thet      = (rand(1,ns)-1/2)*pi/4;
dt        = .01;
count   = (gridEnd(1) - gridStart(1))/meshWidth + 1;

%initialize truth states
xrods = zeros(ns+1,3,timeSteps);
velU  = zeros(timeSteps,count,count,count,3);

%initialize endpoint positions of rods
for i = 1:ns+1;
    
    if (i ~= 1)
        xrods(i,:,1) = [(xrods(i-1,1,1) + lrod*sin(thet(1))),...
                        (xrods(i-1,2,1) + lrod*cos(thet(1))),...
                         xrods(i-1,3,1) ];
    else
        xrods(i,:,1) = torqAppPt; % the initial point is the motor
    end
    
end

%initialize working vectors
velW  = zeros(1,count,count,count,3);
k1    = zeros(ns+1,3,1);
k2    = zeros(ns+1,3,1);
k3    = zeros(ns+1,3,1);
k4    = zeros(ns+1,3,1);
%%%%%%%%%%%%%%% END INITIALIZATION %%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%% BEGIN SIMULATION %%%%%%%%%%%%%%%%%%%%%%%%%%
rand('seed',114422);
for i = 1:timeSteps
    z = rand;
    %alternate motor torques
    if (z > 0)
        L0(1,:) =  L0i(1,:);
        L0(2,:) =  L0i(2,:);
    else
        L0(1,:) = -L0i(1,:);
        L0(2,:) =  L0i(2,:);
    end
    
    %get velocity field at current time step
    velU(i,:,:,:,:) = getVel(gridStart,...
                             gridEnd  ,...
                             meshWidth,...
                             nr       ,...
                             ns       ,...
                             L0       ,...
                             k        ,...
                             deltar   ,...
                             deltas   ,...
                             xrods    ,...
                             lrod     ,...
                             i         );
    
    %interpolate fluid velocities at current rod position
    k1(:,:,1)       = interpVel(gridStart,...
                                gridEnd  ,...
                                meshWidth,...
                                ns       ,...
                                velU     ,...
                                xrods    ,...
                                i         );
                            
    %evaluate Euler step
    xr1             = xrods(:,:,i) + k1*dt;
    
    %get velocity field at working step 1
    velW(1,:,:,:,:) = getVel(gridStart,...
                             gridEnd  ,...
                             meshWidth,...
                             nr       ,...
                             ns       ,...
                             L0       ,...
                             k        ,...
                             deltar   ,...
                             deltas   ,...
                             xr1      ,...
                             lrod     ,...
                             1         );
    
    %interpolate fluid velocities at working step 1
    k2(:,:,1)       = interpVel(gridStart,...
                                gridEnd  ,...
                                meshWidth,...
                                ns       ,...
                                velW     ,...
                                xr1      ,...
                                1         );
                            
    %evaluate Euler step
    xr2             = xrods(:,:,i) + k2*dt/2;
    
    %get velocity field at working step 2
    velW(1,:,:,:,:) = getVel(gridStart,...
                             gridEnd  ,...
                             meshWidth,...
                             nr       ,...
                             ns       ,...
                             L0       ,...
                             k        ,...
                             deltar   ,...
                             deltas   ,...
                             xr2      ,...
                             lrod     ,...
                             1         );
    
    %interpolate fluid velocities at working step 2
    k3(:,:,1)       = interpVel(gridStart,...
                                gridEnd  ,...
                                meshWidth,...
                                ns       ,...
                                velW     ,...
                                xr2      ,...
                                1         );
                            
    %evaluate Euler step
    xr3             = xrods(:,:,i) + k3*dt/2;
    
    %get velocity field at working step 3
    velW(1,:,:,:,:) = getVel(gridStart,...
                             gridEnd  ,...
                             meshWidth,...
                             nr       ,...
                             ns       ,...
                             L0       ,...
                             k        ,...
                             deltar   ,...
                             deltas   ,...
                             xr3      ,...
                             lrod     ,...
                             1         );
    
    %interpolate fluid velocities at working step 3
    k4(:,:,1)       = interpVel(gridStart,...
                                gridEnd  ,...
                                meshWidth,...
                                ns       ,...
                                velW     ,...
                                xr3      ,...
                                1         );
                            
    %RK4 integration
    xrods(:,:,i+1) = xrods(:,:,i) + ...
                     dt/6 * (k1 + 2*k2 + 2*k3 + k4);
    
end
%%%%%%%%%%%%%%% END SIMULATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%
